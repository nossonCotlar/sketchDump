import processing.serial.*;

Sequencer seq;
Serial port;
float bpm = 128;
float b = 0;
float smooth = .1;
float b0, b1, b2, b3;

void setup() {
  fullScreen();
  colorMode(HSB);
  frameRate(60);
  rectMode(CENTER);
  b0 = 0;
  b1 = 0;
  b2 = 0;
  b3 = 0;
  
  String portName = Serial.list()[0];
  port = new Serial(this, portName, 9600);
  seq = new Sequencer(bpm, 8, 4, 4, "nigga");
}

void draw() {
  background(0);

  translate(width / 2, height / 2);

  fill(0, 255, b0);
  rect(-width / 4, -height / 4, width / 2, height / 2);
  fill(75, 255, b1);
  rect(width / 4, -height / 4, width / 2, height / 2);
  fill(150, 255, b2);
  rect(-width / 4, height / 4, width / 2, height / 2);
  fill(225, 255, b3);
  rect(width / 4, height / 4, width / 2, height / 2);

  seq.update();

  bg();
  seq.lightSerialTrigger(port, 0);
}

void keyPressed() {
  seq.control();
  switch(key) {
  case 't':
    b0 = 255;
    break;
  case 'y':
    b1 = 255;
    serialTrigger();
    break;
  case 'g':
    b2 = 255;
    break;
  case 'h':
    b3 = 255;
    break;
  }
}

void mousePressed() {
  seq.mouseSelect();
}

void bg() {
  b0 = lerp(b0, 0, smooth);
  b1 = lerp(b1, 0, smooth); 
  b2 = lerp(b2, 0, smooth); 
  b3 = lerp(b3, 0, smooth); 
  if (seq.outAndChanged(0)) {
    b0 = 255;
  }
  if (seq.outAndChanged(1)) {
    b1 = 255;
  }
  if (seq.outAndChanged(2)) {
    b2 = 255;
  }
  if (seq.outAndChanged(3)) {
    b3 = 255;
  }
}

void nigga() {
  seq.metro.metroTrigger();
}

class Sequencer {
  Metronome metro;
  boolean[] state;
  boolean[] code; 
  boolean[][] channel;
  int channels;
  color onCol, offCol, activeCol, barCol;
  int steps;
  int big = 40;
  int offset = 10;
  int currentStep;
  int currentChannel;

  int prev;


  Sequencer(float bpm, int steps, int speed, int chan, String thread) {
    metro = new Metronome(bpm, speed, thread); 
    channels = chan;
    onCol = color(0, 255, 255);
    activeCol = color(100, 255, 255);
    offCol = 100;
    barCol = 70;
    this.steps = steps;
    state = new boolean[steps];
    code = new boolean[steps];
    channel = new boolean[channels][steps];
    currentStep = 0;
    currentChannel = 0;
    prev = -1;



    state[0] = true;
    for (int i = 1; i < steps; i++) {
      state[i] = false;
    }
    codeClear();
  }

  void update() {
    updateCurrent();
    printBpm();
    next();
    show(0);
  }

boolean out(int chan) {
    return channel[chan][currentStep];
  }

  void show(int where) {
    //display active-control channel
    fill(activeCol);
    rect(-25, where + (currentChannel * (big + offset)), (big + offset) * steps + offset * 2, big + offset, 10);

    for (int j = 0; j < channels; j++) {
      for (int i = 0; i < steps; i++) { //display active and inactive steps
        if (state[i]) fill(onCol);
        else if (i % 4 == 0) fill(barCol);
        else fill(offCol);
        rect(i * (big + offset) - (steps / 2 * (big + offset)), where + (j * (big + offset)), big, big, 6);
      }
      fill(0);
      for (int i = 0; i < steps; i++) { //display coded steps
        if (channel[j][i])
          circle(i * (big + offset) - (steps / 2 * (big + offset)), where + (j * (big + offset)), big / 3);
      }
    }
  }

  void reset() {
    state[currentStep] = false;
    state[0] = true;
    currentStep = 0;
  }

  void next() {
    if (metro.trigger) {
      metro.trigger = !metro.trigger;
      if (currentStep == steps - 1) {
        currentStep = 0;
        state[steps - 1] = false;
        state[0] = true;
        return;
      }
      state[currentStep] = false;
      state[++currentStep] = true;
    }
  }

  void printBpm() {
    pushStyle();
    fill(255);
    textSize(50); 
    text(metro.bpm, -width/2 + 30, -height/2 + 60);
  }

  void mouseSelect() {
    int t = (mouseY   - 20 -  height / 2 + (channels * (big + offset) / 2)) / (big + offset) - 1;
    if (t >= 0 && t <= channels - 1) {
      currentChannel = t;
      setCode();
    }
  }

  void setCode() {
    //calculate which step the mouse is over
    int t = (mouseX  + 20 -  width / 2 + (steps * (big + offset) / 2)) / (big + offset);
    if (t >= 0 && t <= steps - 1) {
      channel[currentChannel][t] = !channel[currentChannel][t];
    }
  }

  void updateCurrent() {
    prev = seq.currentStep;
  }

  boolean currentChange() {
    return (currentStep != prev);
  }

  boolean outAndChanged(int chan) {
    return (out(chan) && currentChange());
  }

  void codeN(int n) {
    for (int i = 0; i < steps; i++) {
      if (i % n == 0) channel[currentChannel][i] = true;
      else channel[currentChannel][i] = false;
    }
  }

  void codeClear() {
    for (int i = 0; i < steps; i++) {
      channel[currentChannel][i] = false;
    }
  }

  void codeClearAll() {
    for (int j = 0; j < channels; j++) {
      for (int i = 0; i < steps; i++) {
        channel[j][i] = false;
      }
    }
  }

  void setBpm(float x) {
    metro.setBpm(x);
  }

  void setSpeed(int x) {
    metro.setSpeed(x);
  }

String[] lines;
int scroll = 0;
int upto = 0;

void setup() {
 fullScreen();
 
 lines = loadStrings("code.txt");
 textSize(32);
 
}

void draw() {
  background(0);
  translate(0, scroll);
  
  for(int i = 0; i < lines.length; i++){
    if (i < upto){
     fill(0, 255, 0); 
    }
    else fill (0);
    text(lines[i], 0, (i * 50) + height / 2);
  }
  
  if(millis() % 50 < 20){
   upto++; 
  }
  scroll -= 25;

}

  void setBpm(float x) {
    metro.setBpm(x);
  }

  void setSpeed(int x) {
    metro.setSpeed(x);
  }

  void control() {
    if (keyPressed) {
      switch(key) {
      case ' ':
        reset();
        break;
      case 'x':
        setSpeed(metro.speed + 1);
        break;
      case 'z':
        setSpeed(metro.speed - 1);
        break;
      case 'm':
        setBpm(metro.bpm + 1);
        break;
      case 'n':
        setBpm(metro.bpm - 1);
        break;
      case '.':
        setBpm(metro.bpm + .1);
        break;
      case ',':
        setBpm(metro.bpm - .1);
        break;
      case 'p':
        nudgeF();
        break;
      case 'o':
        nudgeB();
        break;
      case '1':
        codeN(1);
        break;
      case '2':
        codeN(2);
        break;
      case '3':
        codeN(3);
        break;
      case '4':
        codeN(4);
        break;
      case '8':
        codeN(8);
        break;
      case '0':
        codeClear();
        break;
      case '-':
        codeClearAll();
        break;
      }
      switch(keyCode) {
      case UP:
        activeChannelUp();
        break;
      case DOWN:
        activeChannelDown();
        break;
      }
    }
  }



  void nudgeF() {
    metro.time += 100;
  }

  void nudgeB() {
    metro.time -= 100;
  }


  void activeChannelDown() {
    if (currentChannel < channels - 1)
      currentChannel++;
  }

  void activeChannelUp() {
    if (currentChannel > 0)
      currentChannel--;
  }

  void lightSerialTrigger(Serial serial, int chan) {
    if (outAndChanged(chan)) {
      serial.write('H');
    } else serial.write('L');
  }
}


class Metronome {
  float bpm;
  int speed;
  final int minute = 60000;
  float interval;
  double time;
  double t;
  boolean trigger;

  Metronome(float bpm, int speed, String thread) {
    this.bpm = bpm;
    this.speed = speed;
    interval =  minute / bpm / speed;
    time = millis();
    trigger = false;

    thread(thread);
  }

  boolean metro() {
    t = millis();
    if (t - time > interval) {
      time = t;
      return true;
    }
    return false;
  }
  
  void setBpm(float x){
   bpm = x;
   interval = minute / bpm / speed;
  }
  
  void setSpeed(int x){
    if(x == 0) return;
     speed = x;
     interval = minute / bpm / speed;
  }

  void metroTrigger() {
    while (true) {
      if (metro()) {
        trigger = !trigger;
      }
      delay(1);
    }
  }
}
Game game;
ArrayList<Bot> bots;
int TURN_DELAY = 2000;
Clock clock = new Clock(500);

public void setup()
{ 
  fullScreen();
  noStroke();
  rectMode(CENTER);
  imageMode(CENTER);
  frameRate(30);
  botTexture = loadImage("\\resources/Bot.png");
  obstacleTexture = loadImage("\\resources/Obstacle.png");
  bulletTexture = loadImage("\\resources/Bullet.png");
  bots = new ArrayList<Bot>();
  //bots.add(new TestBot());
  try
  {
    bots.add(new BasicBot());
    bots.add(new BasicBot());
  }
  catch (Exception e)
  {
    println("Exception: " + e);
    println("Failure to create instances of bots!");
  }
  
  try
  {
    //game = new Game("test_map.bbm", bots);
    game = new Game("\\maps/empty_map.bbm", bots);
  } 
  catch (Exception e)
  {
    print("Failure creating game: " + e);
    game = new Game();
  }
  clock.set();
}

public void draw()
{
  background(20);
  if (game.getIsRunning() && clock.checkAndSet()) game.turn();
  game.board.show();
}

public class BasicBot extends Bot
{
  public BasicBot()
  {
    super();
    setName("Basic Bot");
  }

  public Move makeMove(Board board) throws Exception
  {
    Move dodgeMove = dodge(board);
    if (dodgeMove != null) return dodgeMove;
    Move pointTowardsEnemyMove = pointTowardsEnemy(board);
    if (pointTowardsEnemyMove != null) return pointTowardsEnemyMove;
    Move alignWithEnemyMove = alignWithEnemy(board);
    if (alignWithEnemyMove != null) return alignWithEnemyMove;
    return new Move(MoveType.SHOOT);
  }

  // returns true if position will be hit by bullet next turn
  private boolean positionWillContainBullet(Position position, Board board)
  {
    // check cardinal directions for incoming bullets
    for (Direction direction : DIRECTIONS)
    {
      Position targetPosition = position.addDirection(direction);
      Unit unit = board.getSquare(targetPosition);
      if (!(unit instanceof Bullet)) continue;
      Bullet bullet = (Bullet)unit;
      if (bullet.getDirection().equals(direction.opposite())) return true;
    }
    return false;
  }

  private Move dodge(Board board) throws Exception
  {
    if (!positionWillContainBullet(getPosition(), board)) return null;
    for (Direction direction : DIRECTIONS)
    {
      Position targetPosition = getPosition().addDirection(direction);
      if (positionWillContainBullet(targetPosition, board)) continue;
      Unit unit = board.getSquare(targetPosition);
      if (unit instanceof Bullet && ((Bullet)unit).getDirection().equals(direction.opposite())) continue;
      return new Move(MoveType.MOVE, direction);
    }
    return new Move(MoveType.IDLE);
  }

  private Move pointTowardsEnemy(Board board) throws Exception
  {
    Bot enemy = findEnemy(board);
    if (enemy == null)
    {
      println("Can't find enemy!");
      return null;
    }
    double angle = vectorToAngle(
      enemy.getPosition().getColumn() - this.getPosition().getColumn(), 
      -(enemy.getPosition().getRow() - this.getPosition().getRow())
      ) % (2 * PI);
    
    
    Direction targetDirection = new Direction();
    if (angle >= 7 * PI / 4 && angle < 2 * PI) targetDirection = D_RIGHT;
    if (angle >= 0 && angle < PI / 4) targetDirection = D_RIGHT;
    if (angle >= PI / 4 && angle < 3 * PI / 4) targetDirection = D_UP;
    if (angle >= 3 * PI / 4 && angle < 5 * PI / 4) targetDirection = D_LEFT;
    if (angle >= 5 * PI / 4 && angle < 7 * PI / 4) targetDirection = D_DOWN;
    
    // rotate to face targetDirection
    if (getDirection().equals(targetDirection)) return null;
    if (getDirection().turnLeft().equals(targetDirection)) return new Move(MoveType.ROTATE, D_LEFT);
    return new Move(MoveType.ROTATE, D_RIGHT);
  }

  private Bot findEnemy(Board board)
  {
    for (int row = 0; row < board.getSize(); row++)
    {
      for (int column = 0; column < board.getSize(); column++)
      {
        Unit unit = board.getSquare(row, column);
        if (!(unit instanceof Bot)) continue;
        Bot bot = (Bot)unit;
        if (this == bot) continue;
        return bot;
      }
    }
    return null;
  }

  private double vectorToAngle(int x, int y) throws Exception
  {
    double angle = Math.atan2(y, x);
    if (angle < 0) angle += 2 * PI;
    return angle;
  }

  private Move alignWithEnemy(Board board) throws Exception
  {
    Bot enemy = findEnemy(board);
    if (getDirection().equals(D_RIGHT) || getDirection().equals(D_LEFT))
    {
      if (getPosition().getRow() == enemy.getPosition().getRow()) return null;
      if (getPosition().getRow() > enemy.getPosition().getRow()) return new Move(MoveType.MOVE, D_UP);
      return new Move(MoveType.MOVE, D_DOWN);
    } else 
    {
      if (getPosition().getColumn() == enemy.getPosition().getColumn()) return null;
      if (getPosition().getColumn() > enemy.getPosition().getColumn()) return new Move(MoveType.MOVE, D_LEFT);
      return new Move(MoveType.MOVE, D_RIGHT);
    }
  }
}

public class Board
{
  public int size;
  public int offset = 5;
  public int unitSize;
  private Unit[][] board;
  private ArrayList<Bot> bots;
  private ArrayList<Bullet> bullets;

  public Board(int size)
  {
    this.size = size;
    this.board = new Unit[this.size][this.size];
    this.unitSize = height / (this.size + 5);
    this.bots = new ArrayList<Bot>();
    this.bullets = new ArrayList<Bullet>();
    loadTextures();
  }
  
  public Board() { this(16); }

  public Board(String fileName, ArrayList<Bot> bots) throws Exception
  {
    this.bullets = new ArrayList<Bullet>();
    
    // set bot ids
    for (int i = 0; i < bots.size(); i++)
    {
      bots.get(i).setId(i);
    }
  
    this.bots = bots;
    int botIndex = 0;

    // read file
    String[] lines = loadStrings(fileName);

    // check if file was unable to be opened
    if (lines == null) throw new Exception("Unable to open file!");

    // size is first line of file
    this.size = Integer.parseInt(lines[0].split(": ")[1]);

    // initialize empty board
    this.board = new Unit[size][size];

    // read each line of file
    for (String line : lines)
    {
      // ignore line if it is a comment
      if (line.charAt(0) == '#') continue;
      
      // parse line into type: data
      String[] arr = line.split(": ");
      String type = arr[0];

      // read data as array of strings
      String[] data = arr[1].split(", ");

      // position of Unit on board
      int row, column;

      switch (type)
      {
      case "size": // should only be first line
        break;
      case "obstacle":
        row = Integer.parseInt(data[0]);
        column = Integer.parseInt(data[1]);
        this.board[row][column] = new Obstacle(row, column);
        break;
      case "bot":
        if (botIndex == bots.size()) throw new Exception("Not enough bots!");
        row = Integer.parseInt(data[0]);
        column = Integer.parseInt(data[1]);
        Bot bot = bots.get(botIndex++);
        try
        {
          bot.setPosition(row, column);

          // read direction as well
          if (data.length == 3)
          {
            bot.setDirection(new Direction(data[2]));
          }

          this.board[row][column] = bot;
        }
        catch (Exception e)
        {
          System.out.println("Exception: " + e.getMessage());
          System.out.println(bot.getName() + " broke the program! Disqualified!");
          return;
        }
        break;
      default:
        throw new Exception("Type not recognized!");
      }
    }

    // bots left over
    if (botIndex != bots.size()) throw new Exception("Too many bots!");

    this.unitSize = height / (this.size + 5);
    loadTextures();
  }

  // getters
  public Unit getSquare(Position position) {
    if (!containsPosition(position)) return null;
    return board[position.getRow()][position.getColumn()];
  }
  public Unit getSquare(int row, int column) { return getSquare(new Position(row, column)); }
  public int getSize() { return this.size; }
  public ArrayList<Bot> getBots() { return this.bots; }
  public ArrayList<Bullet> getBullets() { return this.bullets; }
  
  // setters
  public void setSquare(Position position, Unit unit) { board[position.getRow()][position.getColumn()] = unit; }
  public void setSquare(int row, int column, Unit unit) { setSquare(new Position(row, column), unit); }
  public void addBot(Bot bot) { bots.add(bot); }
  public void removeBot(Bot bot) { bots.remove(bot); }
  public void removeBots(ArrayList<Bot> botsToRemove) { bots.removeAll(botsToRemove); }
  public void addBullet(Bullet bullet) { bullets.add(bullet); }
  public void removeBullet(Bullet bullet) { bullets.remove(bullet); }
  public void removeBullets(ArrayList<Bullet> bulletsToRemove) { bullets.removeAll(bulletsToRemove); }
  
  private Boolean containsPosition(Position position)
  {
    return
      position.getRow() >= 0 && 
      position.getRow() < getSize() && 
      position.getColumn() >= 0 && 
      position.getColumn() < getSize();
  }

  public void show()
  {
    translate(width / 2, height / 2);
    showGrid();
    for (int i = 0; i < size; i++)
    {
      for (int j = 0; j < size; j++)
      {
        if (board[i][j] == null) continue;
        board[i][j].show();
      }
    }
  }

  private void showGrid()
  {
    fill(100);
    fill(BLANK_COLOR);
    for (int i = 0; i < size; i++)
    {
      for (int j = 0; j < size; j++)
      {
        int x = (i - size / 2) * (unitSize + offset);
        int y = (j - size / 2) * (unitSize + offset);
        square(x, y, unitSize);
      }
    }
  }

  public int pixelCalculate(int location)
  {
    return (location - size / 2) * (unitSize + offset);
  }

  private void loadTextures() {
    botTexture.resize(this.unitSize, this.unitSize);
    bulletTexture.resize(this.unitSize, this.unitSize);
    obstacleTexture.resize(this.unitSize, this.unitSize);
  }
}